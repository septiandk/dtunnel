const fs = require('fs');
const { Client } = require('ssh2');

// Input: SSH connection details
const user = 'ubuntu';
const host = '172.20.66.35';
const privateKeyPath = './ssh-admin-snt.pem';

// Read private key file
const privateKey = fs.readFileSync(privateKeyPath, 'utf8');

// SSH configuration
const sshConfig = {
  host,
  port: 22,
  username: user,
  privateKey: privateKey,
  readyTimeout: 99999, // Adjust as needed
};

// Connect to the SSH server
const conn = new Client();
console.log(`connecting to ${host}...`)
conn
  .on('ready', () => {
    console.log('SSH connection established');

    // Check if Docker exists, then execute Kubernetes commands
    checkDockerExists(conn)
      .then(dockerExists => {
        if (dockerExists) {
          console.log('Docker exists on the server');
          return getDockerContainers(conn);
        } else {
          console.log('Docker does not exist on the server. Proceeding to get Kubernetes Pods.');
          return getKubernetesPods(conn);
        }
      })
      .then(results => {
        const dockerResult = results.docker;
        const kubernetesResult = results.kubernetes;

        console.log('Docker Containers:', dockerResult);
        console.log('Kubernetes Pods:', kubernetesResult);

        conn.end(); // Close the connection
      })
      .catch(err => {
        console.error('Error:', err);
        conn.end(); // Close the connection
      });
  })
  .on('error', err => {
    console.error('SSH connection error:', err);
  })
  .connect(sshConfig);

function runCommand(conn, command) {
  return new Promise((resolve, reject) => {
    conn.exec(command, (err, stream) => {
      if (err) reject(err);

      let output = '';
      stream
        .on('close', () => {
          resolve(output.trim());
        })
        .on('data', data => {
          output += data.toString();
        })
        .stderr.on('data', data => {
          console.error('STDERR:', data.toString());
          reject(new Error('Error in command execution'));
        });
    });
  });
}

function checkDockerExists(conn) {
  const dockerCheckCommand = 'command -v docker';
  return runCommand(conn, dockerCheckCommand)
    .then(output => {
      return output.trim() !== ''; // Docker exists if the command output is not empty
    });
}

function getKubernetesPods(conn) {
  const kubectlCommand = 'sudo kubens snt && sudo kubectl get pods -o jsonpath="{range .items[*]}{.metadata.name}:{.status.phase}\\n{end}"';
  return runCommand(conn, kubectlCommand)
    .then(output => {
      console.log('Kubernetes pods found, processing the data...')
      // Parse the Kubernetes output and return a structured result
      const pods = output.trim().split('\\n').filter(Boolean);
      const result = pods.map(pod => {
        const [name, phase] = pod.split(':');
        return { name: name.trim(), phase: phase.trim() };
      });
      return { kubernetes: result }; // Return an object with a key for Kubernetes result
    });
}

function getDockerContainers(conn) {
  const dockerCommand = 'sudo docker ps --format "{{.ID}}: {{.Names}}"';
  return runCommand(conn, dockerCommand)
    .then(output => {
      console.log('Docker containers found, processing the data...')
      // Parse the Docker output and return a structured result
      const containers = output.trim().split('\n').filter(Boolean);
      const result = containers.map(container => {
        const [id, name] = container.split(':');
        return { id: id.trim(), name: name.trim() };
      });
      return { docker: result }; // Return an object with a key for Docker result
    });
}
